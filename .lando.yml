name: demo-umami
recipe: drupal8
proxy:
  nginx:
    - build-umami.localhost
  # mailhog:
  #   - mailhog.build-umami.localhost
  # solr:
  #   - solr.build-umami.localhost:8983
  # docs:
  #   - docs.build-umami.localhost
  node:
    - node.build-umami.localhost:3000

config:
  php: '7.1'
  webroot: web
  via: nginx
  xdebug: false
  conf:
    php: config/develop/php/php.ini

services:
  # By default the recipe's such as drupal8 will already configure and start an appserver.
  appserver:
    overrides:
       services:
         # In this case we want to override the default container setup to ignore directories, such as the vendor
         # library, which is not necessary to be synced with the OS environment and this container.
         volumes:
           - /app/vendor/
           - /app/documentation/
         # All the way down in this configuration we added a compose file containing shared volumes. These volumes
         # contain the public and private file directories. We do not want them synced with drupal but we do want them
         # to be shared between nginx and the appserver container. Because nginx serves static files, while the
         # appserver (php-fpm container) serves the php files.
           - public_files:/app/web/sites/default/files
           - public_files:/app/files/public
           - private_files:/app/files/private
         # Environment variable to let PHP know that we are running a develop environment. Used in our setting.php setup.
         environment:
           SYNETIC_DTAP_ENV: develop
    # Let's make sure we can use drush aliases from our development environment by making sure on every build that the
    # alias is symlinked to the drush directory in the user folder.
    build:
      - "mkdir -p ~/.drush/alias"
      - "ln -sf /app/drush/alias/build-umami.aliases.drushrc.php ~/.drush/alias/build-umami.aliases.drushrc.php"

  # To allow (frontend) developers to use cool tools based on node, yarn and gulp, we add this container. This could be
  # used to generate css from scss or integrate with browsersync to reload your browser pages when changes are detected.
  # https://docs.devwithlando.io/services/node.html
  node:
    type: node:8.4
    build:
      - "yarn global add gulp-cli@latest yo@latest"
    overrides:
       services:
         volumes:
         # This will prevent syncing between OS and this container within these container directories. Improves
         # file sync speed within docker.
           - /app/vendor/
           - /app/documentation/
           - /app/files

tooling:
  npm:
    service: node
  node:
    service: node
  yarn:
    service: node
  gulp:
    service: node

# Add in some custom event scripting. All available command line tools have a post event automatically defined.
# For instance the above phantomsjs and phpunit tooling will have a post-phantomjs and post-phpunit event which can be
# used.
# https://docs.devwithlando.io/config/events.html
events:

  # Run some commands after `lando db-import`. We want the configuration and caches to be up to date.
  post-db-import:
    - appserver: cd $LANDO_WEBROOT && drush cr -y && drush cim -y

  # Make sure composer is up to date with the latest required packages.
  post-start:
    # This will improve composer install speed, from 4 min to 30 seconds at least with a full composer install
    # on a drupal project.
    - appserver: composer global require hirak/prestissimo
    - appserver: cd $LANDO_MOUNT && composer install

    # If you use a theme with it's own composer management, when using pattern lab for instance, uncomment this.
    #- appserver: cd $LANDO_MOUNT/web/themes/custom/PROJECT_NAME && composer install

    # This is specific for generating the public html files for pattern lab.
    #- appserver: cd $LANDO_MOUND/web/themes/custom/PROJECT_NAME/styleguide && composer install && php core/console generate

# A list of docker compose files to load relative to my app root directory. This follows the docker-compose v3 format,
# and will be merged with the generated docker-compose file from the .lando.yml configuration.
compose:
 - compose.yml
